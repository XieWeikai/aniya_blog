[{"content":"xv6 util lab 在闲暇之余，抽出了一部分时间看了看MIT 6.S081课程的实验一，这个实验可能也许是最简单的一个实验了吧，完全没有涉及到操作系统内部原理相关的知识，只是用xv6的系统调用编写用户态的程序。我也不知道花了不知道多久，断断续续的把实验一干完了。该实验的实验要求见 https://pdos.csail.mit.edu/6.828/2020/labs/util.html.\n准备 编译并使用qemu模拟启动操作系统方法为\n1 make qemu 打分测试的命令如下\n1 make grade 测试某个具体的用例，如测试sleep，方法有两种\n1 2 ./grade-lab-util sleep # 第一种方法 make GRADEFLAGS=sleep grade # 第二种方法 sleep 该任务非常简单，写一个sleep程序，能通过命令行参数指定sleep的tick数(tick指一个时钟周期)。程序非常简单，在user目录下新建文件sleep.c，编写代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include \u0026#34;kernel/types.h\u0026#34; #include \u0026#34;kernel/stat.h\u0026#34; #include \u0026#34;user/user.h\u0026#34; int main(int argc, char *argv[]) { if(argc \u0026lt;= 1){ write(1,\u0026#34;error: no input from user !\\n\u0026#34;,28); exit(-1); } sleep(atoi(argv[1])); // sleep 为系统调用 参数为tick数，将命令行参数通过atoi转为整数即可 exit(0); } 编写完成后还需要修改Makefile中的UPROGS(这应该是user programs的意思)，添加sleep，如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 U=user # 用户态程序目录 UPROGS=\\ $U/_cat\\ $U/_echo\\ $U/_forktest\\ $U/_grep\\ $U/_init\\ $U/_kill\\ $U/_ln\\ $U/_ls\\ $U/_mkdir\\ $U/_rm\\ $U/_sh\\ $U/_stressfs\\ $U/_usertests\\ $U/_grind\\ $U/_wc\\ $U/_zombie\\ $U/_sleep # 这是添加的一行内容 修改后make qemu进入xv6系统可以看到多出了一个sleep程序。该程序能通过打分程序。\npingpong 这个也很简单，直接贴上user/pingpong.c代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include \u0026#34;kernel/types.h\u0026#34; #include \u0026#34;kernel/stat.h\u0026#34; #include \u0026#34;user/user.h\u0026#34; int main(int argc, char *argv[]) { int p1[2],p2[2]; char byte; // byte // 两条管道 双向通信 pipe(p1); // parent to child pipe(p2); // child to parent if(fork() != 0){ // parent close(p2[1]); close(p1[0]); write(p1[1],\u0026#34;0\u0026#34;,1); // write a byte read(p2[0],\u0026amp;byte,1); // read a byte printf(\u0026#34;%d: received pong\\n\u0026#34;,getpid()); close(p2[0]); close(p1[1]); exit(0); }else{ // child close(p2[0]); close(p1[1]); read(p1[0],\u0026amp;byte,1); // read a byte printf(\u0026#34;%d: received ping\\n\u0026#34;,getpid()); write(p2[1],\u0026amp;byte,1); // write a byte close(p2[1]); close(p1[0]); exit(0); } } primes 该任务需要编写程序输出2~35中的所有质数，比较特殊的要求是使用并发的方式来筛选质数，算法描述见 http://swtch.com/~rsc/thread/\n算法描述 用一张图来描述这个筛选质数的并发算法，如下\n上图中每一个框框为一个独立执行的例程(可以是process、thread或者别的什么比如golang中的goroutine，总之是可以并发执行的一段程序)，每一个例程可以给右边的邻居发送筛选出来的有可能是质数的数，每一个例程都会进行相应的筛选，选出来的数发给右边的邻居。\n其中第一个例程会收到2-MAX所有的数字，收到的第一个数字当做质数输出(显然第一个数是2，是质数)。第一个例程知道2是质数了，那第一个例程接下来收到的所有数字，如果可以被2整除，那一定不是质数，不能被2整除的有可能是质数，将有可能是质数的数发送给右边的邻居，右边的邻居做进一步的筛选。\n接下来看第二个例程，可以确定的是，第二个例程收到的第一个例程的第一个数字一定也是个质数。为什么呢？第二个例程收到的第一个数字(记作p)一定大于2(大于前一个例程认定了是质数的数)，所有小于p的质数(目前来看就是2)都不是p的因子，那p肯定也是质数。所以第二个例程可以将收到的第一个数认定为质数，将其输出。接下来收到的数字，第二个例程将检测是否能被p整除，若不能才可能是质数，第二个例程会将有可能是质数的数发给右边的邻居（即第三个例程）。显然第三个例程收到的数字一定不会被前两个质数整除，那么第三个例程收到的第一个数字也是个质数\u0026hellip;\u0026hellip;\n用数学归纳法可以容易看出，每个例程收到的第一个数都是质数，且每一个例程都会把可能是质数的数发给右邻居进一步筛选，每一个例程行为的伪代码描述为\n1 2 3 4 5 6 p = get a number from left neighbor print p loop: n = get a number from left neighbor if (p does not divide n) send n to right neighbor 算法实现 这个任务就要实现这一个算法。在我的实现中，使用进程作为一个独立的例程，主进程负责发送2-35所有的数字，然后开启第一个进程进行筛选，接着每一个进程根据需要判断是否需要开启右邻居，先看主进程代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int main(int argc,char *argv[]){ int p; int to[2]; int status; pipe(to); // to 是主进程发送2~35所有数字给第一个例程所用的管道 if(fork() != 0){ // parent close(to[0]); // do not read 不用的资源尽快close 主进程用该管道不需要读 for(p = 2;p \u0026lt;= 35;p++) write(to[1],\u0026amp;p,sizeof(p)); // 将2~35所有数字写入管道 close(to[1]); }else{ // child worker(to); // 子进程，即上面示意图中的例程，接收父进程发送的数字 exit(0); } wait(\u0026amp;status); // 主进程等待子进程结束 exit(0); } 接着来看看每一个例程的描述函数worker的实现，worker完全按照前文的伪代码实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 void worker(int from[]){ // 参数为接收左邻居数字的管道 int forked = 0; // 标记是否开启过右邻居进程 int to[2]; close(from[1]); // do not write to from 该管道我只使用读端，不使用写端，没用的资源尽快释放 int p; // 接收第一个数字 read(from[0],\u0026amp;p,sizeof(p)); // read first p printf(\u0026#34;prime %d\\n\u0026#34;,p); // 第一个数字一定是质数 int t; // 接收数字 while(read(from[0],\u0026amp;t,sizeof(t) != 0)){ // 该循环里面不断接收数字，挑出可能是质数的数字发给右邻居 if(t % p != 0){ // t有可能是质数 这需要发给右邻居了 if(!forked){ // 还没有右邻居 pipe(to); // 创建和右邻居通信的管道 if(fork() != 0){ // parent close(to[0]);// 本进程关闭管道读端 }else{ // child worker(to); // 子进程从to读取数字 exit(0); } forked = 1; // 标记已经开启过子进程 } write(to[1],\u0026amp;t,sizeof(t)); // 发送t给子进程 } } // 释放资源 close(from[0]); close(to[1]); // 等待右邻居退出 int status; wait(\u0026amp;status); } 以上两段代码实现了该任务。\n另外吐槽一下，经过我的尝试，下面这段代码也是可以通过测试的，看来MIT的测试也不过是验证输出罢了\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int is_prime(int n){ int p = n/2; for(int i = 2; i \u0026lt;= p;i++){ if(n % p == 0) return 0; } return 1; } int main(int argc, char *argv[]) { for(int i =2;i \u0026lt;= 35;i++){ if(is_prime(i)) printf(\u0026#34;prime %d\\n\u0026#34;,i); } exit(0); } find 该任务需要实现一个极简版的find，功能如下所述\n1 find \u0026lt;path\u0026gt; \u0026lt;filename\u0026gt; 在\u0026lt;path\u0026gt;路径中搜索文件名为\u0026lt;filename\u0026gt;的文件，示例如下\n1 2 3 4 5 6 7 8 9 10 $ make qemu ... init: starting sh $ echo \u0026gt; b $ mkdir a $ echo \u0026gt; a/b $ find . b ./b ./a/b $ xv6的目录项 在类unix系统中一般使用基于inode的文件系统(可以参考上交的《现代操作系统:原理与实现》个人感觉挺不错)，在这种文件系统下，inode记录了一个文件的所有内容存在disk的位置，所以知道了inode就知道了某一个文件。在类UNIX系统下目录也是普通的文件，文件内存着一个个目录项，即记录着inode号和其他一些文件信息，在xv6内，目录项如下\n1 2 3 4 5 6 7 8 9 // kernel/fs.h // Directory is a file containing a sequence of dirent structures. #define DIRSIZ 14 struct dirent { ushort inum; // inode number char name[DIRSIZ]; // filename }; fstat和stat xv6中获取文件信息的系统调用为fstat，使用该函数还封装了一个用户态下的工具函数stat，两个函数原型如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // system call int fstat(int fd, struct stat*); // fd 为文件描述符 // ulib.c int stat(const char*, struct stat*); int stat(const char *n, struct stat *st) // 函数定义 { int fd; int r; fd = open(n, O_RDONLY); if(fd \u0026lt; 0) return -1; r = fstat(fd, st); close(fd); return r; } 其中描述文件信息的结构定义如下\n1 2 3 4 5 6 7 8 9 10 11 #define T_DIR 1 // Directory #define T_FILE 2 // File #define T_DEVICE 3 // Device struct stat { int dev; // File system\u0026#39;s disk device uint ino; // Inode number short type; // Type of file short nlink; // Number of links to file uint64 size; // Size of file in bytes }; 实现 有了上面的铺垫，容易编写find代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 void find(char *path,char *filename){ // 该函数在 path 内找 文件名为filename的文件 int fd; struct stat st; struct dirent de; char buff[512]; char *p; strcpy(buff,path); // 路径复制到buff里 p = buff + strlen(buff); *p ++ = \u0026#39;/\u0026#39;; // path 后加一个 / if((fd = open(path,0)) \u0026lt; 0){ // 打开path这个目录文件 fprintf(2,\u0026#34;find: cannot open file:%s\\n\u0026#34;,path); return; } if(fstat(fd,\u0026amp;st) \u0026lt; 0){ // 没能获取文件信息 fprintf(2,\u0026#34;find: cannot stat\\n\u0026#34;); close(fd); return; } if(st.type != T_DIR){ // path 不是目录文件 fprintf(2,\u0026#34;find: path:%s is not a directory\\n\u0026#34;,path); close(fd); return; } while(read(fd,\u0026amp;de,sizeof(de)) == sizeof(de)){ // 遍历每一个目录项 // 无效的inode 或者. 和 ..都不继续搜索 if(de.inum == 0 || strcmp(de.name,\u0026#34;.\u0026#34;) == 0 || strcmp(de.name,\u0026#34;..\u0026#34;) == 0) continue; strcpy(p,de.name); // path/filename stat(buff,\u0026amp;st); // 获取文件信息 switch (st.type) { case T_FILE: // 普通文件 if(strcmp(de.name,filename) == 0) printf(\u0026#34;%s\\n\u0026#34;,buff); break; case T_DIR: // 目录文件则递归搜索 find(buff,filename); // find recursively break; default: break; } } } 主函数编写如下\n1 2 3 4 5 6 7 8 9 int main(int argc,char *argv[]){ if(argc \u0026lt;= 2){ fprintf(2,\u0026#34;find: no enough argument\\n\u0026#34;); exit(-1); } find(argv[1],argv[2]); exit(0); } xargs 该任务要求实现一个极简版的xargs，貌似也没什么好解释的，就是熟悉fork和exec即可，直接粘代码如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include \u0026#34;kernel/types.h\u0026#34; #include \u0026#34;kernel/stat.h\u0026#34; #include \u0026#34;user/user.h\u0026#34; #include \u0026#34;kernel/fs.h\u0026#34; #include \u0026#34;kernel/param.h\u0026#34; #define EOF -1 int getchar(){ char ch; if(read(0,\u0026amp;ch,sizeof(ch)) \u0026lt;= 0) return EOF; return (int)ch; } int readline(char *buf){ int ch; while((ch = getchar()) != \u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; ch != EOF) *buf++ = ch; *buf = 0; if(ch == EOF) return EOF; return 1; } int main(int argc,char *argv[]){ char buf[512]; if(argc \u0026lt;= 1){ fprintf(2,\u0026#34;xarg: no enough arguments\\n\u0026#34;); exit(-1); } int p = 0,q; char *command = argv[1]; char *args[MAXARG]; args[p++] = command; for(int i = 2;i \u0026lt; argc;i++) args[p++] = argv[i]; // arguments from argv q = p; while(readline(buf) != EOF){ args[q] = malloc(strlen(buf)); strcpy(args[q++],buf); } args[q] = 0; int status; if(fork() == 0){ // child exec(command,args); }else{ // father wait(\u0026amp;status); } for(;p \u0026lt; q;p ++) free(args[p]); exit(0); } 尾声 说实话不知道这个MIT 6.S081还能坚持多久，能坚持一个lab就多坚持一个吧☺️\n代码放到 https://github.com/XieWeikai/xv6_lab 的 lab1分支啦，但目前该仓库还是private的，等到这个课程真的完成的差不多了再准备公开了哈哈哈。\n","date":"2023-01-05T16:44:26+08:00","image":"https://XieWeikai.github.io/aniya_blog/p/os_util_lab/saber2_hu583263cbbee05d2c263b501713a891d4_83776_120x120_fill_q75_box_smart1.jpg","permalink":"https://XieWeikai.github.io/aniya_blog/p/os_util_lab/","title":"OS_util_lab"},{"content":"Xv6 环境配置 假期开始，先试着把xv6的实验环境搭建起来，之后做不做实验等到以后再说\u0026hellip;\u0026hellip;\n根据官方的指导教程，在macOS下配置实验环境需要做如下准备\n安装git 早就安装好了 安装qemu 安装risc-v的工具链 安装risc-v工具链 使用如下命令安装 (见 https://github.com/riscv-software-src/homebrew-riscv)\n1 2 brew tap riscv-software-src/riscv brew install riscv-tools 在实际安装时发现brew经常会在某个地方卡住完全不动了(git下载仓库时)，中断后重试几次都是一样。后来在网上发现别人也碰到了类似的问题(见 https://zhayujie.com/mit6828-env.html)，按照该博主的说法，我们只需要安装riscv-gnu-toolchain即可。但下载好源码编译时出现了各种warning，甚至还有error(但貌似还是可以编译出可执行文件的，可能会少一些东西)，根据官网的描述(见 https://github.com/riscv-collab/riscv-gnu-toolchain)，在OS X上编译需要保证文件系统是大小写敏感的，但很可惜macOS使用的文件系统不是大小写敏感的\u0026hellip;\u0026hellip;\n要解决如上问题可以创建一个大小写敏感的文件系统镜像并挂载到本地的某个目录上，方法见 https://github.com/spryker/spryker-docs/blob/master/docs/scos/dev/tutorials-and-howtos/howtos/howto-handle-case-sensitive-file-system-on-mac-os.md ，将源码放到该目录下再编译即可。\n最后感觉太麻烦了，还是决定试一试brew能否成功，执行如下命令\n1 2 brew tap riscv-software-src/riscv brew install riscv-tools 执行开始后本人就去摆烂了，终于在六个小时(左右)后，安装成功完成了\n至此riscv工具链安装完毕。\n安装qemu 理论上来说非常简单，一条命令搞定\n1 brew install qemu 安装完毕，搞定。\n尝试启动xv6，如下\n1 2 3 4 cd path/to/lab git clone git://g.csail.mit.edu/xv6-labs-2020 git checkout util make qemu 在macOS下编译时编译器会报如下错误\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 riscv64-linux-gnu-gcc -Wall -Werror -O -fno-omit-frame-pointer -ggdb -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -I. -fno-stack-protector -fno-pie -no-pie -c -o user/sh.o user/sh.c user/sh.c: In function \u0026#39;runcmd\u0026#39;: user/sh.c:58:1: error: infinite recursion detected [-Werror=infinite-recursion] 58 | runcmd(struct cmd *cmd) | ^~~~~~ user/sh.c:89:5: note: recursive call 89 | runcmd(rcmd-\u0026gt;cmd); | ^~~~~~~~~~~~~~~~~ user/sh.c:109:7: note: recursive call 109 | runcmd(pcmd-\u0026gt;left); | ^~~~~~~~~~~~~~~~~~ user/sh.c:116:7: note: recursive call 116 | runcmd(pcmd-\u0026gt;right); | ^~~~~~~~~~~~~~~~~~~ user/sh.c:95:7: note: recursive call 95 | runcmd(lcmd-\u0026gt;left); | ^~~~~~~~~~~~~~~~~~ user/sh.c:97:5: note: recursive call 97 | runcmd(lcmd-\u0026gt;right); | ^~~~~~~~~~~~~~~~~~~ user/sh.c:127:7: note: recursive call 127 | runcmd(bcmd-\u0026gt;cmd); | ^~~~~~~~~~~~~~~~~ cc1: all warnings being treated as errors make: *** [\u0026lt;builtin\u0026gt;: user/sh.o] Error 1 将Makefile中CFLAGS的-Werror选项去掉即可。\n但编译完成后悲惨的发现，启动qemu后程序就卡住了，没有任何交互行为。根据官方指导的描述，qemu版本太新可能会出现这个问题。经过查找资料，brew貌似没有办法安装旧版本的qemu，只好在qemu官网上下载qemu 4.2后通过源码来安装qemu了，方法如下\n1 2 3 4 5 6 7 8 cd path/to/lab mkdir qemu-build # 在该目录下下载源码并安装 cd qemu-build wget https://download.qemu.org/qemu-4.2.1.tar.xz # 下载源码压缩包 tar xvJf qemu-4.2.1.tar.xz # 解压 cd qemu-4.2.1 ./configure make # 编译 需要花费几十分钟来完成编译，编译后riscv64-softmmu目录内的qemu-system-riscv64即为需要的可执行文件，做一个软连接如下\n1 2 cd riscv64-softmmu ln -s $(pwd)/qemu-system-riscv64 /usr/local/bin/qemu-system-riscv64 之后重新尝试make qemu，可以正常启动xv6操作系统。\n在docker下配置环境 在docker下拉取ubuntu镜像，以该镜像启动容器\n1 2 3 4 docker run -it --name xv6 \\ -v ...:.../path/to/lab \\ # 挂载本地目录 -p ...:... \\ # 端口映射 ubuntu:latest 接着在该容器内先装些最基本的东西 c/c++的工具链(gcc/c++和各种库、包)、git、cmake、等各种东西。\n安装riscv-tools 根据官方指导，使用如下命令安装\n1 apt-get install gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu 这个安装速度比mac下用brew拉取源码编译快得多了。\n顺带安装一些可能是调试工具的包\n1 apt-get install gdb-multiarch 安装qemu 根据官方指导，使用如下命令安装\n1 apt-get install qemu-system-misc 很遗憾，现在的qemu经过两年的改进，和macOS上一样，新版本的qemu启动后就卡死。按照指导，使用如下命令卸载并安装老版本\n1 2 apt-get remove qemu-system-misc # 卸载 apt-get install qemu-system-misc=1:4.2-3ubuntu6 # 安装老版本 但今非昔比了，上述安装方法会提示找不到该版本的qemu。\n按照指导，也可以进行源码安装\n1 2 3 4 5 6 wget https://download.qemu.org/qemu-5.1.0.tar.xz # 下载源码 qemu 5.1.0 tar xf qemu-5.1.0.tar.xz # 解压 cd qemu-5.1.0 ./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=\u0026#34;riscv64-softmmu\u0026#34; make make install 在ubuntu环境下make qemu不会报infinite recursion的错误。\n尾声 到此xv6就可以正常启动了，有可能以后还会碰到其他的问题，等到以后再说吧。\n","date":"2023-01-03T21:11:14+08:00","image":"https://XieWeikai.github.io/aniya_blog/p/xv6-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/wallpaper_hu0ff37ebbb98d2b42bafbb67ed8d5243a_153541_120x120_fill_q75_box_smart1.jpg","permalink":"https://XieWeikai.github.io/aniya_blog/p/xv6-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"xv6 环境配置"},{"content":"OS 寒假开始了，如果每天看一点关于操作系统的东西，说不定就可以完成 25%的下个学期的操作系统课程设计呢？\n","date":"2023-01-01T16:38:36+08:00","image":"https://XieWeikai.github.io/aniya_blog/p/os-flag/ostep-fun_hu25d333fcded103db2f52f7476cb1420a_52206_120x120_fill_q75_box_smart1.jpg","permalink":"https://XieWeikai.github.io/aniya_blog/p/os-flag/","title":"OS flag"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://XieWeikai.github.io/aniya_blog/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://XieWeikai.github.io/aniya_blog/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://XieWeikai.github.io/aniya_blog/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://XieWeikai.github.io/aniya_blog/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://XieWeikai.github.io/aniya_blog/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://XieWeikai.github.io/aniya_blog/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://XieWeikai.github.io/aniya_blog/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\ninline math is like this $a^2+b^2=c^2$\n","date":"2019-03-08T00:00:00Z","permalink":"https://XieWeikai.github.io/aniya_blog/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://XieWeikai.github.io/aniya_blog/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://XieWeikai.github.io/aniya_blog/p/emoji-support/","title":"Emoji Support"}]